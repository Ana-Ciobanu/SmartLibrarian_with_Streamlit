import os
from dotenv import load_dotenv
import streamlit as st
from rag_ingest_and_search import semantic_search
from utils import get_summary_by_title
from openai import OpenAI
import json
from better_profanity import profanity

load_dotenv()
IMAGE_MODEL = os.getenv("OPENAI_IMAGE_MODEL")
TEXT_MODEL = os.getenv("OPENAI_TEXT_MODEL")

profanity.load_censor_words()  # Loads default word list

def contains_offensive_language(text):
    return profanity.contains_profanity(text)

def generate_book_image(book_title, book_summary):
    prompt = f"""
Create a visually striking, artistic book cover or key scene illustration for the book titled **"{book_title}"**.

The image should capture the main themes, mood, and atmosphere described in the summary below. 
Do not include any text or typography in the image.

**Summary for context**:
{book_summary}

Focus on composition, symbolic elements, and color tones that represent the story’s emotional depth. 
Prefer a detailed, cinematic, or painterly style — not cartoonish or abstract. 

Output a full-scene illustration or fantasy-style book cover art, suitable for a reader's visual imagination.
"""
    img_response = client.images.generate(
        model=IMAGE_MODEL,
        prompt=prompt,
        n=1,
        size="1024x1024"
    )
    return img_response.data[0].url

client = OpenAI()
st.set_page_config(page_title="Smart Librarian", layout="centered")
st.title("Smart Librarian – AI Book Recommender")

user_query = ""
user_query = st.text_input("Enter your interests, themes, or keywords to get book recommendations.", "")
tools = [
    {
        "type": "function",
        "name": "get_summary_by_title",
        "description": "Get a book summary by its title.",
        "parameters": {
            "type": "object",
            "properties": {
                "title": {
                    "type": "string",
                    "description": "The title of the book to get the summary for.",
                },
            },
            "required": ["title"],
        },
    },
]

def chatgpt_response(user_input, book_title):
    prompt = f"""
You are a helpful librarian AI. A user asked: '{user_input}'.
You found a matching book: '{book_title}'.
Recommend the book in a friendly, conversational way.
Call the get_summary_by_title tool to get the complete summary which you will display as it is.
"""
    input_list = [
        {"role": "system", "content": "You are a helpful librarian AI."},
        {"role": "user", "content": prompt}
    ]
    response = client.responses.create(
        model=TEXT_MODEL,
        tools=tools,
        input=input_list,
    )

    function_call = None
    function_call_arguments = None
    input_list += response.output

    for item in response.output:
        if item.type == "function_call":
            function_call = item
            function_call_arguments = json.loads(item.arguments)

    detailed_summary = None
    if function_call and function_call_arguments:
        detailed_summary = get_summary_by_title(function_call_arguments["title"])
        result = {"summary": detailed_summary}
        input_list.append({
            "type": "function_call_output",
            "call_id": function_call.call_id,
            "output": json.dumps(result),
        })
        response = client.responses.create(
            model=TEXT_MODEL,
            instructions="Respond only with a book recommendation generated by a tool.",
            tools=tools,
            input=input_list,
        )
        return response.output_text
    # If no function call, just return the model's response
    return response.output_text

if user_query:
    if contains_offensive_language(user_query):
        st.warning("I'm here to help, but please avoid using inappropriate language.")
    else:
        with st.spinner("Searching for books..."):
            docs, metas = semantic_search(user_query)
        st.subheader("Recommended Book:")
        # Only show the top result for conversational response
        if metas and docs:
            meta = metas[0]
            doc = docs[0]

            with st.spinner("Getting AI recommendation..."):
                response = chatgpt_response(user_query, meta['title'])

            st.markdown(response)
            # Automatically generate and display book image
            book_theme = doc if doc else meta['title']
            with st.spinner("Generating image..."):
                img_url = generate_book_image(meta['title'], book_theme)
            st.image(img_url, caption=f"Suggested cover or scene for '{meta['title']}'", use_container_width=True)
        else:
            st.info("No matching books found.")
else:
    st.info("Type your interests above and press Enter.")
