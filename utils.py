import json
from better_profanity import profanity
from openai import OpenAI

profanity.load_censor_words()

def contains_offensive_language(text):
    return profanity.contains_profanity(text)

def generate_book_image(book_title, book_summary, client, IMAGE_MODEL):
    prompt = f"""
Create a visually striking, artistic book cover or key scene illustration for the book titled **"{book_title}"**.

The image should capture the main themes, mood, and atmosphere described in the summary below. 
Do not include any text or typography in the image.

**Summary for context**:
{book_summary}

Focus on composition, symbolic elements, and color tones that represent the story’s emotional depth. 
Prefer a detailed, cinematic, or painterly style — not cartoonish or abstract. 

Output a full-scene illustration or fantasy-style book cover art, suitable for a reader's visual imagination.
"""
    try:
        img_response = client.images.generate(
            model=IMAGE_MODEL,
            prompt=prompt,
            n=1,
            size="1024x1024"
        )
        return img_response.data[0].url
    except Exception as e:
        return None

def chatgpt_response(user_input, book_title, client, TEXT_MODEL):
    from utils import get_summary_by_title
    tools = [
        {
            "type": "function",
            "name": "get_summary_by_title",
            "description": "Get a book summary by its title.",
            "parameters": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "The title of the book to get the summary for.",
                    },
                },
                "required": ["title"],
            },
        },
    ]
    prompt = f"""
You are a helpful librarian. A user asked: '{user_input}'.
You found a matching book: '{book_title}'.
Recommend the book in a friendly, conversational way.
Call the get_summary_by_title tool to get the complete summary which you will display as it is.
"""
    input_list = [
        {"role": "system", "content": "You are a helpful librarian."},
        {"role": "user", "content": prompt}
    ]
    try:
        response = client.responses.create(
            model=TEXT_MODEL,
            tools=tools,
            input=input_list,
        )

        function_call = None
        function_call_arguments = None
        input_list += response.output

        for item in response.output:
            if item.type == "function_call":
                function_call = item
                function_call_arguments = json.loads(item.arguments)

        detailed_summary = None
        if function_call and function_call_arguments:
            detailed_summary = get_summary_by_title(function_call_arguments["title"])
            result = {"summary": detailed_summary}
            input_list.append({
                "type": "function_call_output",
                "call_id": function_call.call_id,
                "output": json.dumps(result),
            })
            response = client.responses.create(
                model=TEXT_MODEL,
                instructions="Respond only with a book recommendation generated by a tool.",
                tools=tools,
                input=input_list,
            )
        return response.output_text
    except Exception:
        return "Sorry, something went wrong."

def get_summary_by_title(title, file_path="complete_book_summaries.json"):
    """
    Returns the detailed summary for a given book title from the JSON file.
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            summaries = json.load(f)
        for entry in summaries:
            if entry['title'].lower() == title.lower():
                return entry['summary']
    except Exception as e:
        print(f"Error loading summary: {e}")
    return None
